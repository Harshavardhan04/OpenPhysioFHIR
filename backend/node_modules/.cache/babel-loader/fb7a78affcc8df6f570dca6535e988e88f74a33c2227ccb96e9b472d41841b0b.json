{"ast":null,"code":"var _jsxFileName = \"/Users/harshmishra/Desktop/Team42_COMP0016/attempt4/frontend/src/containers/PastData/PastData.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import {\n//   Box,\n//   Button,\n//   Typography,\n//   Dialog,\n//   DialogTitle,\n//   DialogContent,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   Autocomplete,\n//   TextField\n// } from '@mui/material';\n\n// const allFields = ['steps', 'jointAngle', 'muscleStrength'];\n\n// function PastDataPage() {\n//     const [pastData, setPastData] = useState([]);\n//     const [selectedTimeframe, setSelectedTimeframe] = useState('');\n//     const [selectedFields, setSelectedFields] = useState([]);\n//     const [openDialog, setOpenDialog] = useState(false);\n//     const [selectedSessionData, setSelectedSessionData] = useState({});\n\n//     useEffect(() => {\n//         axios.get('http://localhost:5000/past-data')\n//             .then(response => {\n//                 setPastData(response.data);\n//             })\n//             .catch(error => {\n//                 console.error('Error fetching past data:', error);\n//             });\n//     }, []);\n\n//     const handleTimeframeChange = (event, newValue) => {\n//         setSelectedTimeframe(newValue);\n//     };\n\n//     const handleFieldChange = (event, newValue) => {\n//         setSelectedFields(newValue);\n//     };\n\n//     const filteredData = selectedTimeframe && selectedFields.length > 0 \n//         ? pastData.filter(data => data.date.startsWith(selectedTimeframe)) \n//         : [];\n\n//         const downloadCSV = () => {\n//             let csvContent = \"data:text/csv;charset=utf-8,\" \n//             + [\"Date\", ...selectedFields].join(\",\") + \"\\n\" \n//             + filteredData.map(row => [row.date, ...selectedFields.map(field => row[field])].join(\",\")).join(\"\\n\");\n\n//             const encodedUri = encodeURI(csvContent);\n//             const link = document.createElement(\"a\");\n//             link.setAttribute(\"href\", encodedUri);\n//             link.setAttribute(\"download\", \"past_data.csv\");\n//             document.body.appendChild(link); \n\n//             link.click(); \n//         }\n\n//         const downloadSessionData = () => {\n//             let csvContent = \"data:text/csv;charset=utf-8,\" \n//             + Object.keys(selectedSessionData).join(\",\") + \"\\n\" \n//             + Object.values(selectedSessionData).join(\",\");\n\n//             const encodedUri = encodeURI(csvContent);\n//             const link = document.createElement(\"a\");\n//             link.setAttribute(\"href\", encodedUri);\n//             link.setAttribute(\"download\", \"session_data.csv\");\n//             document.body.appendChild(link);\n\n//             link.click();\n//         }\n\n//     const handleDateClick = (date) => {\n//         const sessionData = pastData.find(d => d.date === date);\n//         setSelectedSessionData(sessionData);\n//         setOpenDialog(true);\n//     };\n\n//     const handleCloseDialog = () => {\n//         setOpenDialog(false);\n//     };\n\n//     return (\n//         <Box sx={{ p: 2 }}>\n//             <Typography variant=\"h5\" gutterBottom>Past Data</Typography>\n//             <Autocomplete\n//                 value={selectedTimeframe}\n//                 onChange={handleTimeframeChange}\n//                 options={['2023-01', '2023-02']} // Add more options as needed\n//                 renderInput={(params) => <TextField {...params} label=\"Timeframe\" />}\n//                 sx={{ m: 1, minWidth: 120 }}\n//             />\n\n//             <Autocomplete\n//                 multiple\n//                 value={selectedFields}\n//                 onChange={handleFieldChange}\n//                 options={allFields}\n//                 getOptionLabel={(option) => option}\n//                 renderInput={(params) => <TextField {...params} label=\"Fields\" />}\n//                 sx={{ m: 1, minWidth: 300 }}\n//             />\n\n//             <Button variant=\"contained\" onClick={downloadCSV} sx={{ m: 1 }}>\n//                 Download\n//             </Button>\n\n//             <TableContainer component={Paper}>\n//                 <Table>\n//                     <TableHead>\n//                         <TableRow>\n//                             <TableCell>Date</TableCell>\n//                             {selectedFields.map(field => (\n//                                 <TableCell key={field}>{field}</TableCell>\n//                             ))}\n//                         </TableRow>\n//                     </TableHead>\n//                     <TableBody>\n//                         {filteredData.map((row, index) => (\n//                             <TableRow key={index} hover onClick={() => handleDateClick(row.date)} style={{ cursor: 'pointer' }}>\n//                                 <TableCell>{row.date}</TableCell>\n//                                 {selectedFields.map(field => (\n//                                     <TableCell key={field}>{row[field]}</TableCell>\n//                                 ))}\n//                             </TableRow>\n//                         ))}\n//                     </TableBody>\n//                 </Table>\n//             </TableContainer>\n\n//             {/* Dialog for Session Summary */}\n//             <Dialog open={openDialog} onClose={handleCloseDialog}>\n//                 <DialogTitle>Session Summary</DialogTitle>\n//                 <DialogContent>\n//                     <Typography>{`Date: ${selectedSessionData.date}`}</Typography>\n//                     {allFields.map(field => (\n//                         <Typography key={field}>{`${field}: ${selectedSessionData[field]}`}</Typography>\n//                     ))}\n//                     <Button onClick={downloadSessionData}>Download This Session</Button>\n//                 </DialogContent>\n//             </Dialog>\n//         </Box>\n//     );\n// }\n\n// export default PastDataPage;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Box, Button, Typography, Dialog, DialogTitle, DialogContent, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Autocomplete, TextField } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst allFields = ['steps', 'jointAngle', 'muscleStrength'];\nconst patientId = 'test1'; // Placeholder patient ID\n\nfunction PastDataPage() {\n  _s();\n  const [pastData, setPastData] = useState([]);\n  const [selectedTimeframe, setSelectedTimeframe] = useState('');\n  const [selectedFields, setSelectedFields] = useState([]);\n  const [openDialog, setOpenDialog] = useState(false);\n  const [selectedSessionData, setSelectedSessionData] = useState({});\n  useEffect(() => {\n    axios.get(`http://localhost:5000/past-data/test1`).then(response => {\n      setPastData(response.data);\n    }).catch(error => {\n      console.error('Error fetching past data:', error);\n    });\n  }, []);\n  const handleTimeframeChange = (event, newValue) => {\n    setSelectedTimeframe(newValue);\n  };\n  const handleFieldChange = (event, newValue) => {\n    setSelectedFields(newValue);\n  };\n  const filteredData = selectedTimeframe && selectedFields.length > 0 ? pastData.filter(data => data.date.startsWith(selectedTimeframe)) : [];\n  const downloadCSV = () => {\n    let csvContent = \"data:text/csv;charset=utf-8,\" + [\"Date\", ...selectedFields].join(\",\") + \"\\n\" + filteredData.map(row => [row.date, ...selectedFields.map(field => row[field])].join(\",\")).join(\"\\n\");\n    const encodedUri = encodeURI(csvContent);\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"href\", encodedUri);\n    link.setAttribute(\"download\", \"past_data.csv\");\n    document.body.appendChild(link);\n    link.click();\n  };\n  const downloadSessionData = () => {\n    let csvContent = \"data:text/csv;charset=utf-8,\" + Object.keys(selectedSessionData).join(\",\") + \"\\n\" + Object.values(selectedSessionData).join(\",\");\n    const encodedUri = encodeURI(csvContent);\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"href\", encodedUri);\n    link.setAttribute(\"download\", \"session_data.csv\");\n    document.body.appendChild(link);\n    link.click();\n  };\n  const handleDateClick = date => {\n    const sessionData = pastData.find(d => d.date === date);\n    setSelectedSessionData(sessionData);\n    setOpenDialog(true);\n  };\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      gutterBottom: true,\n      children: \"Past Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n      value: selectedTimeframe,\n      onChange: handleTimeframeChange,\n      options: ['2023-01', '2023-02'] // Add more options as needed\n      ,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n        ...params,\n        label: \"Timeframe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 42\n      }, this),\n      sx: {\n        m: 1,\n        minWidth: 120\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n      multiple: true,\n      value: selectedFields,\n      onChange: handleFieldChange,\n      options: allFields,\n      getOptionLabel: option => option,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n        ...params,\n        label: \"Fields\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 42\n      }, this),\n      sx: {\n        m: 1,\n        minWidth: 300\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: downloadCSV,\n      sx: {\n        m: 1\n      },\n      children: \"Download\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 29\n            }, this), selectedFields.map(field => /*#__PURE__*/_jsxDEV(TableCell, {\n              children: field\n            }, field, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: filteredData.map((row, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n            hover: true,\n            onClick: () => handleDateClick(row.date),\n            style: {\n              cursor: 'pointer'\n            },\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: row.date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 33\n            }, this), selectedFields.map(field => /*#__PURE__*/_jsxDEV(TableCell, {\n              children: row[field]\n            }, field, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 37\n            }, this))]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openDialog,\n      onClose: handleCloseDialog,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Session Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          children: `Date: ${selectedSessionData.date}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 21\n        }, this), allFields.map(field => /*#__PURE__*/_jsxDEV(Typography, {\n          children: `${field}: ${selectedSessionData[field]}`\n        }, field, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: downloadSessionData,\n          children: \"Download This Session\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 9\n  }, this);\n}\n_s(PastDataPage, \"PKtPmrd7s2NS+iuHF4daLutd5Lk=\");\n_c = PastDataPage;\nexport default PastDataPage;\nvar _c;\n$RefreshReg$(_c, \"PastDataPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","Box","Button","Typography","Dialog","DialogTitle","DialogContent","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Autocomplete","TextField","jsxDEV","_jsxDEV","allFields","patientId","PastDataPage","_s","pastData","setPastData","selectedTimeframe","setSelectedTimeframe","selectedFields","setSelectedFields","openDialog","setOpenDialog","selectedSessionData","setSelectedSessionData","get","then","response","data","catch","error","console","handleTimeframeChange","event","newValue","handleFieldChange","filteredData","length","filter","date","startsWith","downloadCSV","csvContent","join","map","row","field","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","downloadSessionData","Object","keys","values","handleDateClick","sessionData","find","d","handleCloseDialog","sx","p","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","options","renderInput","params","label","m","minWidth","multiple","getOptionLabel","option","onClick","component","index","hover","style","cursor","open","onClose","_c","$RefreshReg$"],"sources":["/Users/harshmishra/Desktop/Team42_COMP0016/attempt4/frontend/src/containers/PastData/PastData.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import {\n//   Box,\n//   Button,\n//   Typography,\n//   Dialog,\n//   DialogTitle,\n//   DialogContent,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n//   Paper,\n//   Autocomplete,\n//   TextField\n// } from '@mui/material';\n\n// const allFields = ['steps', 'jointAngle', 'muscleStrength'];\n\n// function PastDataPage() {\n//     const [pastData, setPastData] = useState([]);\n//     const [selectedTimeframe, setSelectedTimeframe] = useState('');\n//     const [selectedFields, setSelectedFields] = useState([]);\n//     const [openDialog, setOpenDialog] = useState(false);\n//     const [selectedSessionData, setSelectedSessionData] = useState({});\n\n//     useEffect(() => {\n//         axios.get('http://localhost:5000/past-data')\n//             .then(response => {\n//                 setPastData(response.data);\n//             })\n//             .catch(error => {\n//                 console.error('Error fetching past data:', error);\n//             });\n//     }, []);\n\n//     const handleTimeframeChange = (event, newValue) => {\n//         setSelectedTimeframe(newValue);\n//     };\n\n//     const handleFieldChange = (event, newValue) => {\n//         setSelectedFields(newValue);\n//     };\n\n//     const filteredData = selectedTimeframe && selectedFields.length > 0 \n//         ? pastData.filter(data => data.date.startsWith(selectedTimeframe)) \n//         : [];\n\n//         const downloadCSV = () => {\n//             let csvContent = \"data:text/csv;charset=utf-8,\" \n//             + [\"Date\", ...selectedFields].join(\",\") + \"\\n\" \n//             + filteredData.map(row => [row.date, ...selectedFields.map(field => row[field])].join(\",\")).join(\"\\n\");\n    \n//             const encodedUri = encodeURI(csvContent);\n//             const link = document.createElement(\"a\");\n//             link.setAttribute(\"href\", encodedUri);\n//             link.setAttribute(\"download\", \"past_data.csv\");\n//             document.body.appendChild(link); \n    \n//             link.click(); \n//         }\n    \n//         const downloadSessionData = () => {\n//             let csvContent = \"data:text/csv;charset=utf-8,\" \n//             + Object.keys(selectedSessionData).join(\",\") + \"\\n\" \n//             + Object.values(selectedSessionData).join(\",\");\n    \n//             const encodedUri = encodeURI(csvContent);\n//             const link = document.createElement(\"a\");\n//             link.setAttribute(\"href\", encodedUri);\n//             link.setAttribute(\"download\", \"session_data.csv\");\n//             document.body.appendChild(link);\n    \n//             link.click();\n//         }\n\n//     const handleDateClick = (date) => {\n//         const sessionData = pastData.find(d => d.date === date);\n//         setSelectedSessionData(sessionData);\n//         setOpenDialog(true);\n//     };\n\n//     const handleCloseDialog = () => {\n//         setOpenDialog(false);\n//     };\n\n//     return (\n//         <Box sx={{ p: 2 }}>\n//             <Typography variant=\"h5\" gutterBottom>Past Data</Typography>\n//             <Autocomplete\n//                 value={selectedTimeframe}\n//                 onChange={handleTimeframeChange}\n//                 options={['2023-01', '2023-02']} // Add more options as needed\n//                 renderInput={(params) => <TextField {...params} label=\"Timeframe\" />}\n//                 sx={{ m: 1, minWidth: 120 }}\n//             />\n\n//             <Autocomplete\n//                 multiple\n//                 value={selectedFields}\n//                 onChange={handleFieldChange}\n//                 options={allFields}\n//                 getOptionLabel={(option) => option}\n//                 renderInput={(params) => <TextField {...params} label=\"Fields\" />}\n//                 sx={{ m: 1, minWidth: 300 }}\n//             />\n\n//             <Button variant=\"contained\" onClick={downloadCSV} sx={{ m: 1 }}>\n//                 Download\n//             </Button>\n\n//             <TableContainer component={Paper}>\n//                 <Table>\n//                     <TableHead>\n//                         <TableRow>\n//                             <TableCell>Date</TableCell>\n//                             {selectedFields.map(field => (\n//                                 <TableCell key={field}>{field}</TableCell>\n//                             ))}\n//                         </TableRow>\n//                     </TableHead>\n//                     <TableBody>\n//                         {filteredData.map((row, index) => (\n//                             <TableRow key={index} hover onClick={() => handleDateClick(row.date)} style={{ cursor: 'pointer' }}>\n//                                 <TableCell>{row.date}</TableCell>\n//                                 {selectedFields.map(field => (\n//                                     <TableCell key={field}>{row[field]}</TableCell>\n//                                 ))}\n//                             </TableRow>\n//                         ))}\n//                     </TableBody>\n//                 </Table>\n//             </TableContainer>\n\n//             {/* Dialog for Session Summary */}\n//             <Dialog open={openDialog} onClose={handleCloseDialog}>\n//                 <DialogTitle>Session Summary</DialogTitle>\n//                 <DialogContent>\n//                     <Typography>{`Date: ${selectedSessionData.date}`}</Typography>\n//                     {allFields.map(field => (\n//                         <Typography key={field}>{`${field}: ${selectedSessionData[field]}`}</Typography>\n//                     ))}\n//                     <Button onClick={downloadSessionData}>Download This Session</Button>\n//                 </DialogContent>\n//             </Dialog>\n//         </Box>\n//     );\n// }\n\n// export default PastDataPage;\n\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport {\n  Box,\n  Button,\n  Typography,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Autocomplete,\n  TextField\n} from '@mui/material';\n\nconst allFields = ['steps', 'jointAngle', 'muscleStrength'];\nconst patientId = 'test1'; // Placeholder patient ID\n\nfunction PastDataPage() {\n    const [pastData, setPastData] = useState([]);\n    const [selectedTimeframe, setSelectedTimeframe] = useState('');\n    const [selectedFields, setSelectedFields] = useState([]);\n    const [openDialog, setOpenDialog] = useState(false);\n    const [selectedSessionData, setSelectedSessionData] = useState({});\n\n    useEffect(() => {\n        axios.get(`http://localhost:5000/past-data/test1`)\n            .then(response => {\n                setPastData(response.data);\n            })\n            .catch(error => {\n                console.error('Error fetching past data:', error);\n            });\n    }, []);\n\n    const handleTimeframeChange = (event, newValue) => {\n        setSelectedTimeframe(newValue);\n    };\n\n    const handleFieldChange = (event, newValue) => {\n        setSelectedFields(newValue);\n    };\n\n    const filteredData = selectedTimeframe && selectedFields.length > 0 \n        ? pastData.filter(data => data.date.startsWith(selectedTimeframe)) \n        : [];\n\n        const downloadCSV = () => {\n            let csvContent = \"data:text/csv;charset=utf-8,\" \n            + [\"Date\", ...selectedFields].join(\",\") + \"\\n\" \n            + filteredData.map(row => [row.date, ...selectedFields.map(field => row[field])].join(\",\")).join(\"\\n\");\n    \n            const encodedUri = encodeURI(csvContent);\n            const link = document.createElement(\"a\");\n            link.setAttribute(\"href\", encodedUri);\n            link.setAttribute(\"download\", \"past_data.csv\");\n            document.body.appendChild(link); \n    \n            link.click(); \n        }\n    \n        const downloadSessionData = () => {\n            let csvContent = \"data:text/csv;charset=utf-8,\" \n            + Object.keys(selectedSessionData).join(\",\") + \"\\n\" \n            + Object.values(selectedSessionData).join(\",\");\n    \n            const encodedUri = encodeURI(csvContent);\n            const link = document.createElement(\"a\");\n            link.setAttribute(\"href\", encodedUri);\n            link.setAttribute(\"download\", \"session_data.csv\");\n            document.body.appendChild(link);\n    \n            link.click();\n        }\n\n    const handleDateClick = (date) => {\n        const sessionData = pastData.find(d => d.date === date);\n        setSelectedSessionData(sessionData);\n        setOpenDialog(true);\n    };\n\n    const handleCloseDialog = () => {\n        setOpenDialog(false);\n    };\n\n\n\n    return (\n        <Box sx={{ p: 2 }}>\n            <Typography variant=\"h5\" gutterBottom>Past Data</Typography>\n            <Autocomplete\n                value={selectedTimeframe}\n                onChange={handleTimeframeChange}\n                options={['2023-01', '2023-02']} // Add more options as needed\n                renderInput={(params) => <TextField {...params} label=\"Timeframe\" />}\n                sx={{ m: 1, minWidth: 120 }}\n            />\n\n            <Autocomplete\n                multiple\n                value={selectedFields}\n                onChange={handleFieldChange}\n                options={allFields}\n                getOptionLabel={(option) => option}\n                renderInput={(params) => <TextField {...params} label=\"Fields\" />}\n                sx={{ m: 1, minWidth: 300 }}\n            />\n\n            <Button variant=\"contained\" onClick={downloadCSV} sx={{ m: 1 }}>\n                Download\n            </Button>\n\n            <TableContainer component={Paper}>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Date</TableCell>\n                            {selectedFields.map(field => (\n                                <TableCell key={field}>{field}</TableCell>\n                            ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {filteredData.map((row, index) => (\n                            <TableRow key={index} hover onClick={() => handleDateClick(row.date)} style={{ cursor: 'pointer' }}>\n                                <TableCell>{row.date}</TableCell>\n                                {selectedFields.map(field => (\n                                    <TableCell key={field}>{row[field]}</TableCell>\n                                ))}\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n\n            {/* Dialog for Session Summary */}\n            <Dialog open={openDialog} onClose={handleCloseDialog}>\n                <DialogTitle>Session Summary</DialogTitle>\n                <DialogContent>\n                    <Typography>{`Date: ${selectedSessionData.date}`}</Typography>\n                    {allFields.map(field => (\n                        <Typography key={field}>{`${field}: ${selectedSessionData[field]}`}</Typography>\n                    ))}\n                    <Button onClick={downloadSessionData}>Download This Session</Button>\n                </DialogContent>\n            </Dialog>\n        </Box>\n    );\n}\n\n\nexport default PastDataPage;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SACEC,GAAG,EACHC,MAAM,EACNC,UAAU,EACVC,MAAM,EACNC,WAAW,EACXC,aAAa,EACbC,KAAK,EACLC,SAAS,EACTC,SAAS,EACTC,cAAc,EACdC,SAAS,EACTC,QAAQ,EACRC,KAAK,EACLC,YAAY,EACZC,SAAS,QACJ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,SAAS,GAAG,CAAC,OAAO,EAAE,YAAY,EAAE,gBAAgB,CAAC;AAC3D,MAAMC,SAAS,GAAG,OAAO,CAAC,CAAC;;AAE3B,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC0B,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAAC4B,cAAc,EAAEC,iBAAiB,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAAC8B,UAAU,EAAEC,aAAa,CAAC,GAAG/B,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACgC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGjC,QAAQ,CAAC,CAAC,CAAC,CAAC;EAElEC,SAAS,CAAC,MAAM;IACZC,KAAK,CAACgC,GAAG,CAAE,uCAAsC,CAAC,CAC7CC,IAAI,CAACC,QAAQ,IAAI;MACdX,WAAW,CAACW,QAAQ,CAACC,IAAI,CAAC;IAC9B,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACrD,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,qBAAqB,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;IAC/ChB,oBAAoB,CAACgB,QAAQ,CAAC;EAClC,CAAC;EAED,MAAMC,iBAAiB,GAAGA,CAACF,KAAK,EAAEC,QAAQ,KAAK;IAC3Cd,iBAAiB,CAACc,QAAQ,CAAC;EAC/B,CAAC;EAED,MAAME,YAAY,GAAGnB,iBAAiB,IAAIE,cAAc,CAACkB,MAAM,GAAG,CAAC,GAC7DtB,QAAQ,CAACuB,MAAM,CAACV,IAAI,IAAIA,IAAI,CAACW,IAAI,CAACC,UAAU,CAACvB,iBAAiB,CAAC,CAAC,GAChE,EAAE;EAEJ,MAAMwB,WAAW,GAAGA,CAAA,KAAM;IACtB,IAAIC,UAAU,GAAG,8BAA8B,GAC7C,CAAC,MAAM,EAAE,GAAGvB,cAAc,CAAC,CAACwB,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,GAC5CP,YAAY,CAACQ,GAAG,CAACC,GAAG,IAAI,CAACA,GAAG,CAACN,IAAI,EAAE,GAAGpB,cAAc,CAACyB,GAAG,CAACE,KAAK,IAAID,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC,CAACH,IAAI,CAAC,GAAG,CAAC,CAAC,CAACA,IAAI,CAAC,IAAI,CAAC;IAEtG,MAAMI,UAAU,GAAGC,SAAS,CAACN,UAAU,CAAC;IACxC,MAAMO,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCF,IAAI,CAACG,YAAY,CAAC,MAAM,EAAEL,UAAU,CAAC;IACrCE,IAAI,CAACG,YAAY,CAAC,UAAU,EAAE,eAAe,CAAC;IAC9CF,QAAQ,CAACG,IAAI,CAACC,WAAW,CAACL,IAAI,CAAC;IAE/BA,IAAI,CAACM,KAAK,CAAC,CAAC;EAChB,CAAC;EAED,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;IAC9B,IAAId,UAAU,GAAG,8BAA8B,GAC7Ce,MAAM,CAACC,IAAI,CAACnC,mBAAmB,CAAC,CAACoB,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,GACjDc,MAAM,CAACE,MAAM,CAACpC,mBAAmB,CAAC,CAACoB,IAAI,CAAC,GAAG,CAAC;IAE9C,MAAMI,UAAU,GAAGC,SAAS,CAACN,UAAU,CAAC;IACxC,MAAMO,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCF,IAAI,CAACG,YAAY,CAAC,MAAM,EAAEL,UAAU,CAAC;IACrCE,IAAI,CAACG,YAAY,CAAC,UAAU,EAAE,kBAAkB,CAAC;IACjDF,QAAQ,CAACG,IAAI,CAACC,WAAW,CAACL,IAAI,CAAC;IAE/BA,IAAI,CAACM,KAAK,CAAC,CAAC;EAChB,CAAC;EAEL,MAAMK,eAAe,GAAIrB,IAAI,IAAK;IAC9B,MAAMsB,WAAW,GAAG9C,QAAQ,CAAC+C,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACxB,IAAI,KAAKA,IAAI,CAAC;IACvDf,sBAAsB,CAACqC,WAAW,CAAC;IACnCvC,aAAa,CAAC,IAAI,CAAC;EACvB,CAAC;EAED,MAAM0C,iBAAiB,GAAGA,CAAA,KAAM;IAC5B1C,aAAa,CAAC,KAAK,CAAC;EACxB,CAAC;EAID,oBACIZ,OAAA,CAAChB,GAAG;IAACuE,EAAE,EAAE;MAAEC,CAAC,EAAE;IAAE,CAAE;IAAAC,QAAA,gBACdzD,OAAA,CAACd,UAAU;MAACwE,OAAO,EAAC,IAAI;MAACC,YAAY;MAAAF,QAAA,EAAC;IAAS;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eAC5D/D,OAAA,CAACH,YAAY;MACTmE,KAAK,EAAEzD,iBAAkB;MACzB0D,QAAQ,EAAE3C,qBAAsB;MAChC4C,OAAO,EAAE,CAAC,SAAS,EAAE,SAAS,CAAE,CAAC;MAAA;MACjCC,WAAW,EAAGC,MAAM,iBAAKpE,OAAA,CAACF,SAAS;QAAA,GAAKsE,MAAM;QAAEC,KAAK,EAAC;MAAW;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAE;MACrER,EAAE,EAAE;QAAEe,CAAC,EAAE,CAAC;QAAEC,QAAQ,EAAE;MAAI;IAAE;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC,eAEF/D,OAAA,CAACH,YAAY;MACT2E,QAAQ;MACRR,KAAK,EAAEvD,cAAe;MACtBwD,QAAQ,EAAExC,iBAAkB;MAC5ByC,OAAO,EAAEjE,SAAU;MACnBwE,cAAc,EAAGC,MAAM,IAAKA,MAAO;MACnCP,WAAW,EAAGC,MAAM,iBAAKpE,OAAA,CAACF,SAAS;QAAA,GAAKsE,MAAM;QAAEC,KAAK,EAAC;MAAQ;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAE;MAClER,EAAE,EAAE;QAAEe,CAAC,EAAE,CAAC;QAAEC,QAAQ,EAAE;MAAI;IAAE;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC,eAEF/D,OAAA,CAACf,MAAM;MAACyE,OAAO,EAAC,WAAW;MAACiB,OAAO,EAAE5C,WAAY;MAACwB,EAAE,EAAE;QAAEe,CAAC,EAAE;MAAE,CAAE;MAAAb,QAAA,EAAC;IAEhE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAET/D,OAAA,CAACP,cAAc;MAACmF,SAAS,EAAEhF,KAAM;MAAA6D,QAAA,eAC7BzD,OAAA,CAACV,KAAK;QAAAmE,QAAA,gBACFzD,OAAA,CAACN,SAAS;UAAA+D,QAAA,eACNzD,OAAA,CAACL,QAAQ;YAAA8D,QAAA,gBACLzD,OAAA,CAACR,SAAS;cAAAiE,QAAA,EAAC;YAAI;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAW,CAAC,EAC1BtD,cAAc,CAACyB,GAAG,CAACE,KAAK,iBACrBpC,OAAA,CAACR,SAAS;cAAAiE,QAAA,EAAcrB;YAAK,GAAbA,KAAK;cAAAwB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAoB,CAC5C,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACI;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ,CAAC,eACZ/D,OAAA,CAACT,SAAS;UAAAkE,QAAA,EACL/B,YAAY,CAACQ,GAAG,CAAC,CAACC,GAAG,EAAE0C,KAAK,kBACzB7E,OAAA,CAACL,QAAQ;YAAamF,KAAK;YAACH,OAAO,EAAEA,CAAA,KAAMzB,eAAe,CAACf,GAAG,CAACN,IAAI,CAAE;YAACkD,KAAK,EAAE;cAAEC,MAAM,EAAE;YAAU,CAAE;YAAAvB,QAAA,gBAC/FzD,OAAA,CAACR,SAAS;cAAAiE,QAAA,EAAEtB,GAAG,CAACN;YAAI;cAAA+B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC,EAChCtD,cAAc,CAACyB,GAAG,CAACE,KAAK,iBACrBpC,OAAA,CAACR,SAAS;cAAAiE,QAAA,EAActB,GAAG,CAACC,KAAK;YAAC,GAAlBA,KAAK;cAAAwB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAyB,CACjD,CAAC;UAAA,GAJSc,KAAK;YAAAjB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAKV,CACb;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC,eAGjB/D,OAAA,CAACb,MAAM;MAAC8F,IAAI,EAAEtE,UAAW;MAACuE,OAAO,EAAE5B,iBAAkB;MAAAG,QAAA,gBACjDzD,OAAA,CAACZ,WAAW;QAAAqE,QAAA,EAAC;MAAe;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAAC,eAC1C/D,OAAA,CAACX,aAAa;QAAAoE,QAAA,gBACVzD,OAAA,CAACd,UAAU;UAAAuE,QAAA,EAAG,SAAQ5C,mBAAmB,CAACgB,IAAK;QAAC;UAAA+B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAa,CAAC,EAC7D9D,SAAS,CAACiC,GAAG,CAACE,KAAK,iBAChBpC,OAAA,CAACd,UAAU;UAAAuE,QAAA,EAAe,GAAErB,KAAM,KAAIvB,mBAAmB,CAACuB,KAAK,CAAE;QAAC,GAAjDA,KAAK;UAAAwB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAyD,CAClF,CAAC,eACF/D,OAAA,CAACf,MAAM;UAAC0F,OAAO,EAAE7B,mBAAoB;UAAAW,QAAA,EAAC;QAAqB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd;AAAC3D,EAAA,CAlIQD,YAAY;AAAAgF,EAAA,GAAZhF,YAAY;AAqIrB,eAAeA,YAAY;AAAC,IAAAgF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}